{"version":3,"file":"abstract.edulib.ws.js","sourceRoot":"","sources":["../src/abstract.edulib.ws.ts"],"names":[],"mappings":";;AAAA,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC/B,kCAAqC;AACrC,iCAAoC;AAiBpC;IAaE,0BAAsB,OAAe,EAAY,OAAiB;QAA5C,YAAO,GAAP,OAAO,CAAQ;QAAY,YAAO,GAAP,OAAO,CAAU;QALxD,WAAM,GAAY;YAC1B,KAAK,EAAE,OAAO,CAAC,GAAG;YAClB,KAAK,EAAE,OAAO,CAAC,KAAK;SACrB,CAAC;QAGA,IAAI,CAAC,IAAI,GAAG,gBAAgB,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACtD,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAAC,CAAC;IACvD,CAAC;IAIS,kCAAO,GAAjB,UAAkB,OAAgB;QAAlC,iBAQC;QAPC,IAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC;QACjC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC5B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;QAC5D,OAAO,CAAC,OAAO,EAAE,UAAC,GAAG,EAAE,GAAG,EAAE,IAAI;YAC9B,KAAI,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI,IAAK,OAAA,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAtB,CAAsB,EAAE,UAAC,GAAG,IAAK,OAAA,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,EAApB,CAAoB,CAAC,CAAC;QAC7G,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;IAC1B,CAAC;IAES,wCAAa,GAAvB,UAAwB,OAAgB;QACtC,IAAM,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACtC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACd,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC;gBACtB,aAAa,EAAE,YAAU,SAAW;aACrC,EACC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC;IAES,0CAAe,GAAzB,UAA0B,GAAQ,EAAE,GAAoB,EAAE,IAAS;QACjE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAAC,CAAC;QACxC,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,KAAK,GAAG,IAAI,GAAG,CAAC,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;YACrD,IAAI,CAAC;gBACH,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YAC3C,CAAC;YAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACb,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACtB,CAAC;QACH,CAAC;QACD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,UAAU,EAAE,GAAG,CAAC,UAAU,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IACvE,CAAC;IAES,mCAAQ,GAAlB,UAAmB,IAAY;QAC7B,MAAM,CAAI,IAAI,CAAC,IAAI,aAAQ,IAAI,CAAC,OAAO,GAAG,IAAM,CAAC;IACnD,CAAC;IApDM,4BAAW,GAAiB;QACjC,OAAO,EAAE,mCAAmC;QAC5C,UAAU,EAAE,uBAAuB;KACpC,CAAA;IAmDH,uBAAC;CAAA,AAxDD,IAwDC;AAxDqB,4CAAgB;AAwDrC,CAAC","sourcesContent":["const merge = require('merge');\nimport Promise = require('bluebird');\nimport request = require('request');\nimport { Options, RequestResponse } from 'request';\n\nexport interface IEnvironment {\n  [key: string]: string;\n}\n\nexport interface ILogger {\n  debug: (message?: any, ...optionalParams: any[]) => void;\n  error: (message?: any, ...optionalParams: any[]) => void;\n}\n\nexport interface IOptions {\n  env: string;\n  logger?: ILogger;\n}\n\nexport abstract class AbstractEdulibWS {\n\n  static Environment: IEnvironment = {\n    staging: 'https://staging-edulib.xair.cloud',\n    production: 'https://www.edulib.fr'\n  }\n\n  protected host: string;\n  protected logger: ILogger = {\n    debug: console.log,\n    error: console.error\n  };\n\n  constructor(protected version: string, protected options: IOptions) {\n    this.host = AbstractEdulibWS.Environment[options.env];\n    if (options.logger) { this.logger = options.logger; }\n  }\n\n  protected abstract getAuthToken(): string;\n\n  protected request(options: Options): Promise<any> {\n    const deferred = Promise.defer();\n    this.updateOptions(options);\n    this.logger.debug('EdulibWS::request', 'options:', options);\n    request(options, (err, res, body) => {\n      this.processResponse(err, res, body).then((data) => deferred.resolve(data), (err) => deferred.reject(err));\n    });\n    return deferred.promise;\n  }\n\n  protected updateOptions(options: Options) {\n    const authToken = this.getAuthToken();\n    if (authToken) {\n      options.headers = merge({\n        Authorization: `Bearer ${authToken}`\n      },\n        options.headers || {});\n    }\n  }\n\n  protected processResponse(err: any, res: RequestResponse, body: any): Promise<any> {\n    if (err) { return Promise.reject(err); }\n    if (res.statusCode === 200 || res.statusCode === 201) {\n      try {\n        return Promise.resolve(JSON.parse(body));\n      } catch (err) {\n        Promise.reject(err);\n      }\n    }\n    return Promise.reject({ statusCode: res.statusCode, message: body });\n  }\n\n  protected buildUrl(path: string) {\n    return `${this.host}/api/${this.version}${path}`;\n  }\n\n};"]}